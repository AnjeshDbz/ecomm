{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/seller.service\";\nexport class authGuard {\n  constructor(sellerService) {\n    this.sellerService = sellerService;\n  }\n  canActivate(route, state) {\n    if (localStorage.getItem('seller')) {\n      return true;\n    }\n    return this.sellerService.isSellerLoggedIn;\n  }\n}\nauthGuard.ɵfac = function authGuard_Factory(t) {\n  return new (t || authGuard)(i0.ɵɵinject(i1.SellerService));\n};\nauthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: authGuard,\n  factory: authGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["authGuard","constructor","sellerService","canActivate","route","state","localStorage","getItem","isSellerLoggedIn","i0","ɵɵinject","i1","SellerService","factory","ɵfac","providedIn"],"sources":["F:\\Anjesh\\Learn\\angular\\ecomm\\src\\app\\auth.guard.ts"],"sourcesContent":["// import { CanActivateFn } from '@angular/router';\n// import { SellerService } from './services/seller.service';\n\n\n\n\n// export const authGuard: CanActivateFn = (route, state) => {\n\n//   constructor(private sellerService:SellerService)\n  \n//   return false;\n// };\n\n\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SellerService } from './services/seller.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class authGuard implements CanActivate {\n  constructor(private sellerService:SellerService){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if(localStorage.getItem('seller')){\n       return true;\n      }\n      return this.sellerService.isSellerLoggedIn;\n  }\n  \n} "],"mappings":";;AAsBA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,aAA2B;IAA3B,KAAAA,aAAa,GAAbA,aAAa;EAAgB;EACjDC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAC;MACjC,OAAO,IAAI;;IAEZ,OAAO,IAAI,CAACL,aAAa,CAACM,gBAAgB;EAC9C;;AATWR,SAAS,C;mBAATA,SAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;AAAA;AAATZ,SAAS,C;SAATA,SAAS;EAAAa,OAAA,EAATb,SAAS,CAAAc,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}